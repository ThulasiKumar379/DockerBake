pipeline {
    agent any
    environment {
        REPO_URL = 'https://github.com/ThulasiKumar379/DockerBake.git' // Repository URL
        DOCKER_BAKE_FILE = 'application/docker-bake.yaml' // Path to Docker Bake file
        DOCKER_REGISTRY_URL = 'https://index.docker.io/v1/' // Docker Hub registry
        DOCKER_REGISTRY_USERNAME = 'thulasikumar073' // Replace with your Docker Hub username
        DOCKER_REGISTRY_PASSWORD = credentials('dockerhub-credentials') // Jenkins credentials ID
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clean workspace before cloning
                    deleteDir()
                }
                // Clone the repository
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], // Adjust the branch name as needed
                    extensions: [],
                    userRemoteConfigs: [[
                        url: "${REPO_URL}" // Repository URL
                    ]]
                ])
            }
        }
        stage('Build Docker Images') {
            steps {
                // Run Docker Bake to build images
                sh '''
                if ! command -v docker &> /dev/null; then
                    echo "Docker not found. Please ensure Docker is installed on this agent."
                    exit 1
                fi

                docker buildx bake -f "${WORKSPACE}/${DOCKER_BAKE_FILE}"
                '''
            }
        }
        stage('Login to Docker Registry') {
            steps {
                script {
                    // Docker login
                    sh '''
                    echo $DOCKER_REGISTRY_PASSWORD | docker login $DOCKER_REGISTRY_URL -u $DOCKER_REGISTRY_USERNAME --password-stdin
                    '''
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                // Run Docker Bake to push images
                sh '''
                if ! command -v docker &> /dev/null; then
                    echo "Docker not found. Please ensure Docker is installed on this agent."
                    exit 1
                fi

                docker buildx bake -f "${WORKSPACE}/${DOCKER_BAKE_FILE}" --push
                '''
            }
        }
    }
    post {
        success {
            echo "Pipeline completed successfully. Docker images built and pushed."
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}

